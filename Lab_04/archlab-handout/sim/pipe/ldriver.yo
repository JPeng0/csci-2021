                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      |   .pos 0
0x000: 30f4d806000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                            | 
                            |   # Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 |   irmovq $63, %rdx    # src and dst have 63 elements
0x014: 30f65804000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f74802000000000000 |   irmovq src, %rdi  # src array
0x028: 803200000000000000   |   call ncopy     
0x031: 00                   |   halt      # should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Kris Swann, swann013
                            | #
                            | # Insert iaddq wherever possible.
                            | # Apply loop unrolling.
                            | # Move jumps to right after subtracting from len.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | ##################################################################
                            | # ORIGINAL
                            | #  # Loop header
                            | #  xorq %rax,%rax        # count = 0;
                            | #  andq %rdx,%rdx        # len <= 0?
                            | #  jle Done              # if so, goto Done:
                            | #
                            | #Loop:
                            | #  mrmovq (%rdi), %r10   # read val from src
                            | #  andq %r10, %r10       # val <= 0?
                            | #  jle Npos              # if so, goto Npos:
                            | #  iaddq $1, %rax        # count ++
                            | #Npos:
                            | #  rmmovq %r10, (%rsi)   # store val to dst
                            | #  iaddq $-1, %rdx       # len--
                            | #  iaddq $8, %rdi        # src++
                            | #  iaddq $8, %rsi        # dst++
                            | #  andq %rdx,%rdx        # len > 0?
                            | #  jg Loop               # if so, goto Loop:
                            | ##################################################################
                            | 
                            | 
                            | # Loop header
0x032: 6222                 |     andq %rdx,%rdx          # len <= 0?
0x034: 765200000000000000   |     jg Loop                 # if so, goto Loop:
0x03d: 704002000000000000   |     jmp Done                # else, goto Done:
0x046:                      | Setup:
                            |     #xorq %rax,%rax          # count = 0
0x046: 2020                 |     rrmovq %rdx, %rax        # count = len
0x048: c0f00100000000000000 |     iaddq $1, %rax           # count += 1
                            | 
0x052:                      | Loop:
0x052: 50a70000000000000000 |     mrmovq (%rdi), %r10     # read val1 from src
0x05c: 50b70800000000000000 |     mrmovq $8(%rdi), %r11   # read val2 from src+8
0x066: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # store val1 to dest
0x070: 62aa                 |     andq %r10, %r10         # val1 > 0?
0x072: 768500000000000000   |     jg L1                   # if not, goto L1:
0x07b: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x085:                      | L1:
0x085: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x08f: 76a100000000000000   |     jg L2                   # if len > 0, goto L2:
0x098: 704002000000000000   |     jmp Done                # else, goto Done:
0x0a1:                      | L2:
0x0a1: 50a71000000000000000 |     mrmovq $16(%rdi), %r10  # read val3 from src+16
0x0ab: 40b60800000000000000 |     rmmovq %r11, $8(%rsi)   # store val2 to dest+8
0x0b5: 62bb                 |     andq %r11, %r11         # val2 > 0?
0x0b7: 76ca00000000000000   |     jg L3                   # if not, goto L3:
0x0c0: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x0ca:                      | L3:
0x0ca: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x0d4: 76e600000000000000   |     jg L4                   # if len > 0, goto L4:
0x0dd: 704002000000000000   |     jmp Done                # else, goto Done:
0x0e6:                      | L4:
0x0e6: 50b71800000000000000 |     mrmovq $24(%rdi), %r11  # read val4 from src+24
0x0f0: 40a61000000000000000 |     rmmovq %r10, $16(%rsi)  # store val3 to dest+16
0x0fa: 62aa                 |     andq %r10, %r10         # val3 > 0?
0x0fc: 760f01000000000000   |     jg L5                   # if not, goto L5:
0x105: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x10f:                      | L5:
0x10f: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x119: 762b01000000000000   |     jg L6                   # if len > 0, goto L6:
0x122: 704002000000000000   |     jmp Done                # else, goto Done:
0x12b:                      | L6:
0x12b: 50a72000000000000000 |     mrmovq $32(%rdi), %r10  # read val5 from src+32
0x135: 40b61800000000000000 |     rmmovq %r11, $24(%rsi)  # store val4 to dest+24
0x13f: 62bb                 |     andq %r11, %r11         # val4 > 0?
0x141: 765401000000000000   |     jg L7                   # if not, goto L7:
0x14a: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x154:                      | L7:
0x154: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x15e: 767001000000000000   |     jg L8                   # if len > 0, goto L8:
0x167: 704002000000000000   |     jmp Done                # else, goto Done:
0x170:                      | L8:
0x170: 50b72800000000000000 |     mrmovq $40(%rdi), %r11  # read val6 from src+40
0x17a: 40a62000000000000000 |     rmmovq %r10, $32(%rsi)  # store val5 to dest+32
0x184: 62aa                 |     andq %r10, %r10         # val5 > 0?
0x186: 769901000000000000   |     jg L9                   # if not, goto L9:
0x18f: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x199:                      | L9:
0x199: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x1a3: 76b501000000000000   |     jg L10                   # if len > 0, goto L10:
0x1ac: 704002000000000000   |     jmp Done                # else, goto Done:
0x1b5:                      | L10:
0x1b5: 50a73000000000000000 |     mrmovq $48(%rdi), %r10  # read val7 from src+48
0x1bf: 40b62800000000000000 |     rmmovq %r11, $40(%rsi)  # store val6 to dest+40
0x1c9: 62bb                 |     andq %r11, %r11         # val6 > 0?
0x1cb: 76de01000000000000   |     jg L11                  # if not, goto L11:
0x1d4: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x1de:                      | L11:
0x1de: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x1e8: 76fa01000000000000   |     jg L12                  # if len > 0, goto L12:
0x1f1: 704002000000000000   |     jmp Done                # else, goto Done:
0x1fa:                      | L12:
0x1fa: 40a63000000000000000 |     rmmovq %r10, $48(%rsi)  # store val7 to dest+48
0x204: 62aa                 |     andq %r10, %r10         # val3 > 0?
0x206: 761902000000000000   |     jg L13                  # if not, goto L13:
0x20f: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x219:                      | L13:
0x219: c0f73800000000000000 |     iaddq $56, %rdi         # src += 7
0x223: c0f63800000000000000 |     iaddq $56, %rsi         # dest += 7
0x22d: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x237: 765200000000000000   |     jg Loop                 # if len > 0, goto Loop:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x240:                      | Done:
0x240: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x241:                      | End:
                            | #/* $end ncopy-ys */
0x241:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x248:                      |   .align 8
0x248:                      | src:
0x248: 0100000000000000     | 	.quad 1
0x250: feffffffffffffff     | 	.quad -2
0x258: 0300000000000000     | 	.quad 3
0x260: 0400000000000000     | 	.quad 4
0x268: fbffffffffffffff     | 	.quad -5
0x270: faffffffffffffff     | 	.quad -6
0x278: 0700000000000000     | 	.quad 7
0x280: 0800000000000000     | 	.quad 8
0x288: 0900000000000000     | 	.quad 9
0x290: f6ffffffffffffff     | 	.quad -10
0x298: f5ffffffffffffff     | 	.quad -11
0x2a0: f4ffffffffffffff     | 	.quad -12
0x2a8: 0d00000000000000     | 	.quad 13
0x2b0: 0e00000000000000     | 	.quad 14
0x2b8: f1ffffffffffffff     | 	.quad -15
0x2c0: f0ffffffffffffff     | 	.quad -16
0x2c8: 1100000000000000     | 	.quad 17
0x2d0: 1200000000000000     | 	.quad 18
0x2d8: edffffffffffffff     | 	.quad -19
0x2e0: 1400000000000000     | 	.quad 20
0x2e8: 1500000000000000     | 	.quad 21
0x2f0: 1600000000000000     | 	.quad 22
0x2f8: e9ffffffffffffff     | 	.quad -23
0x300: e8ffffffffffffff     | 	.quad -24
0x308: e7ffffffffffffff     | 	.quad -25
0x310: e6ffffffffffffff     | 	.quad -26
0x318: 1b00000000000000     | 	.quad 27
0x320: e4ffffffffffffff     | 	.quad -28
0x328: e3ffffffffffffff     | 	.quad -29
0x330: 1e00000000000000     | 	.quad 30
0x338: e1ffffffffffffff     | 	.quad -31
0x340: e0ffffffffffffff     | 	.quad -32
0x348: 2100000000000000     | 	.quad 33
0x350: deffffffffffffff     | 	.quad -34
0x358: 2300000000000000     | 	.quad 35
0x360: dcffffffffffffff     | 	.quad -36
0x368: dbffffffffffffff     | 	.quad -37
0x370: 2600000000000000     | 	.quad 38
0x378: d9ffffffffffffff     | 	.quad -39
0x380: d8ffffffffffffff     | 	.quad -40
0x388: d7ffffffffffffff     | 	.quad -41
0x390: d6ffffffffffffff     | 	.quad -42
0x398: d5ffffffffffffff     | 	.quad -43
0x3a0: 2c00000000000000     | 	.quad 44
0x3a8: 2d00000000000000     | 	.quad 45
0x3b0: d2ffffffffffffff     | 	.quad -46
0x3b8: 2f00000000000000     | 	.quad 47
0x3c0: 3000000000000000     | 	.quad 48
0x3c8: 3100000000000000     | 	.quad 49
0x3d0: ceffffffffffffff     | 	.quad -50
0x3d8: 3300000000000000     | 	.quad 51
0x3e0: 3400000000000000     | 	.quad 52
0x3e8: 3500000000000000     | 	.quad 53
0x3f0: caffffffffffffff     | 	.quad -54
0x3f8: 3700000000000000     | 	.quad 55
0x400: 3800000000000000     | 	.quad 56
0x408: c7ffffffffffffff     | 	.quad -57
0x410: c6ffffffffffffff     | 	.quad -58
0x418: c5ffffffffffffff     | 	.quad -59
0x420: 3c00000000000000     | 	.quad 60
0x428: c3ffffffffffffff     | 	.quad -61
0x430: 3e00000000000000     | 	.quad 62
0x438: 3f00000000000000     | 	.quad 63
0x440: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                            | 
0x450:                      |   .align 16
0x450:                      | Predest:
0x450: fadebc0000000000     |   .quad 0xbcdefa
0x458:                      | dest:
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650:                      | Postdest:
0x650: bcfade0000000000     |   .quad 0xdefabc
                            | 
0x658:                      | .align 8
                            | # Run time stack
0x658: 0000000000000000     |   .quad 0
0x660: 0000000000000000     |   .quad 0
0x668: 0000000000000000     |   .quad 0
0x670: 0000000000000000     |   .quad 0
0x678: 0000000000000000     |   .quad 0
0x680: 0000000000000000     |   .quad 0
0x688: 0000000000000000     |   .quad 0
0x690: 0000000000000000     |   .quad 0
0x698: 0000000000000000     |   .quad 0
0x6a0: 0000000000000000     |   .quad 0
0x6a8: 0000000000000000     |   .quad 0
0x6b0: 0000000000000000     |   .quad 0
0x6b8: 0000000000000000     |   .quad 0
0x6c0: 0000000000000000     |   .quad 0
0x6c8: 0000000000000000     |   .quad 0
0x6d0: 0000000000000000     |   .quad 0
                            | 
0x6d8:                      | Stack:
